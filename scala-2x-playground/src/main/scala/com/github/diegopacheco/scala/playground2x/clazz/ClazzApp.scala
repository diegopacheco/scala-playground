package com.github.diegopacheco.scala.playground2x.clazz

//
// Case Classes
// 1. By default, all constructor parameters are public and immutable
// 2. case classes have an apply function auto-generated by the compiler.
// 3. case classes have a companion object generated by the compiler
// 4. case classes have a copy method that allows you to create a new instance of the case class with some of the fields changed
// 5. case class has automatically defined hashcode and equals methods. Also, we have all getters defined by default.
// 6. case classes are serializable
//
// Limitations:
// 1. a case class canâ€™t inherit from another case class.
//
case class ImmutabilityCar(val color: String, val wheels: Int, val engine: String) {
  def withColor(color: String): ImmutabilityCar =
    this.copy(color = color)

  override def toString: String =
    s"This is a car with $color paint, $wheels wheels, and $engine engine"
}

trait Plant
case class Tree(name: String) extends Plant
case class Flower(name: String) extends Plant

object Plant {
  def plantName(plant: Plant): String = plant match {
    case Tree(name) => s"This is a tree named $name"
    case Flower(name) => s"This is a flower named $name"
  }
}

object ClazzApp extends App{

  val car = ImmutabilityCar("red", 4, "V8")
  println(car)

  val car2 = car.withColor("blue")
  println(car2)

  val car3 = car.copy(engine = "V12")
  println(car3)

  val tree = Tree("Oak")
  val flower = Flower("Rose")
  println(Plant.plantName(tree))
  println(Plant.plantName(flower))

}
